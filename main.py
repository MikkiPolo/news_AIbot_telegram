import logging
import pandas as pd
import textwrap
from telegram import Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ChatAction
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler,
                          CallbackQueryHandler, ContextTypes, filters)
from telegram.ext import filters
from datetime import datetime
from openai import OpenAI
from config import TELEGRAM_TOKEN, OPENAI_API_KEY, CHANNEL_ID, OWNER_ID, LOG_FILE

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

PROMPT_TEMPLATE = """
–¢—ã ‚Äî –º–æ—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è. –Ø ‚Äî –º—É–∂—á–∏–Ω–∞ 35-—Ç–∏ –ª–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–º—ã—à–ª—è–µ—Ç –≤—Å–ª—É—Ö –æ –ø–æ–ª–∏—Ç–∏–∫–µ –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö.

–í–æ—Ç –Ω–æ–≤–æ—Å—Ç—å:

"{news}"

–°–¥–µ–ª–∞–π —Å–ª–µ–¥—É—é—â–µ–µ:
1. –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ **–æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ –∏ —ë–º–∫–æ –ø–µ—Ä–µ–¥–∞–π —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏**, –≤—ã–¥–µ–ª–∏ –µ—ë –∂–∏—Ä–Ω—ã–º (`**`) –∏ –¥–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ‚ùóÔ∏è, üî•, üí¨ –∏ —Ç.–ø.).
2. –ù–∏–∂–µ –Ω–∞–ø–∏—à–∏ –±–ª–æ–∫ **\"–ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\"** ‚Äî –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤ –∏ –æ—Ñ–∏—Ü–∏–æ–∑–∞.
3. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º, –ø—Ä—è–º—ã–º, —É–≤–µ—Ä–µ–Ω–Ω—ã–º. –Ø—Å–Ω–æ –æ–±–æ–∑–Ω–∞—á—å –ø–æ–∑–∏—Ü–∏—é: –∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç, –∫—Ç–æ –ª—É–∫–∞–≤–∏—Ç, —á—Ç–æ –≤–∞–∂–Ω–æ.
4. –ü–∏—à–∏ —á–µ—Å—Ç–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —è –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É—é —ç—Ç–æ –¥—Ä—É–∑—å—è–º. –ù–µ –±–æ–π—Å—è –∫—Ä–∏—Ç–∏–∫–∏, –Ω–æ –∏ –Ω–µ –ø–µ—Ä–µ–≥–∏–±–∞–π. –ú–æ–∂–Ω–æ —á—É—Ç—å –∏—Ä–æ–Ω–∏–∏.
5. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ –≤—Ä–æ–¥–µ ¬´–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ¬ª, ¬´–≤–µ—Å—å–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ¬ª, ¬´–Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç —à–∞—Ö–º–∞—Ç–Ω—É—é –ø–∞—Ä—Ç–∏—é¬ª –∏ —Ç.–ø.
6. –ù–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–æ–≤–æ—Å—Ç—å, –Ω–µ –¥–æ–¥—É–º—ã–≤–∞–π –¥–µ—Ç–∞–ª–∏, –Ω–µ –ø–æ–¥–º–µ–Ω—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–æ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–Ω –º–µ–∂–¥—É –∫–∞–≤—ã—á–∫–∞–º–∏.
7. –ï—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–∏ –µ–≥–æ. –ü–µ—Ä–µ–ø–∏—à–∏ –ø–æ—Å—Ç —Å —É—á—ë—Ç–æ–º –∑–∞–º–µ—á–∞–Ω–∏–π. –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞. –¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç, —Ç–æ–ª—å–∫–æ –≤—ã–¥–∞–π –Ω–æ–≤—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç.
8. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å—Ç–∏–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, —Å–æ–±–ª—é–¥–∞–π –µ–≥–æ —Å—Ç—Ä–æ–≥–æ: –Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å—Ç—Ä–æ–≥–æ", "—Å –∏—Ä–æ–Ω–∏–µ–π", "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ" –∏–ª–∏ "–∫—Ä–∞—Ç–∫–æ".

–§–æ—Ä–º–∞—Ç:
**‚ùóÔ∏è[–°—É—Ç—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π]**

–ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
[–ü—Ä–æ—Å—Ç–æ–π, —á–µ—Å—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –º—É–∂—Å–∫–æ–≥–æ –ª–∏—Ü–∞, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
"""

# –õ–æ–≥ –≤ .csv
def log_to_csv(user_id: int, news: str, response: str) -> None:
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    entry = {"timestamp": now, "user_id": user_id, "news": news, "response": response}
    try:
        df = pd.read_csv(LOG_FILE)
    except FileNotFoundError:
        df = pd.DataFrame(columns=["timestamp", "user_id", "news", "response"])
    df = pd.concat([df, pd.DataFrame([entry])], ignore_index=True)
    df.to_csv(LOG_FILE, index=False)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

def extract_and_format(response: str) -> str:
    response = response.replace("–ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n", "–ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ")
    lines = response.strip().splitlines()
    formatted = []
    headline_done = False

    for line in lines:
        line = line.strip()
        if not line:
            continue

        if not headline_done and not line.startswith("**") and "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:" not in line:
            formatted.append(f"**‚ùóÔ∏è{line}**")
            headline_done = True
        else:
            formatted.append(line)

    return "\n\n".join(formatted)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
async def generate_post(news: str, comment: str = None, style: str = None) -> str:
    prompt = PROMPT_TEMPLATE.format(news=news)

    if style:
        prompt += f"\n\n–°—Ç–∏–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {style}"

    if comment:
        prompt += (
            f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:\n{comment}\n\n"
            "–ü–µ—Ä–µ–ø–∏—à–∏ –≤–µ—Å—å –ø–æ—Å—Ç —Ü–µ–ª–∏–∫–æ–º —Å —É—á—ë—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞. "
            "–ù–µ –¥–æ–±–∞–≤–ª—è–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç."
        )

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500,
            temperature=0.7
        )
        raw = response.choices[0].message.content.strip()
        return extract_and_format(raw)
    except Exception as e:
        logging.exception("OpenAI API error")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç: {e}"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–ª—è
async def handle_style_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    style_map = {
        "style_strict": "—Å—Ç—Ä–æ–≥–æ",
        "style_ironic": "—Å –∏—Ä–æ–Ω–∏–µ–π",
        "style_short": "–∫—Ä–∞—Ç–∫–æ",
        "style_emotional": "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ"
    }
    style = style_map.get(query.data)
    context.user_data['style'] = style

    news = context.user_data.get('news')
    comment = context.user_data.get('revision_comment', '')

    await query.message.reply_text("–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç—å...")
    result = await generate_post(news, comment=comment, style=style)
    context.user_data['post'] = result
    context.user_data['awaiting_revision'] = False

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
            InlineKeyboardButton("‚úèÔ∏è –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="revise")
        ]
    ])

    await query.message.reply_text(result, parse_mode="Markdown", reply_markup=keyboard)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def unified_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text or update.message.caption
    user_id = update.effective_user.id

    if context.user_data.get('awaiting_revision_text'):
        context.user_data['revision_comment'] = user_input
        context.user_data['awaiting_revision_text'] = False

        news = context.user_data.get('news')
        comment = context.user_data.get('revision_comment')

        await update.message.reply_text("–î–æ—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç—å...")
        result = await generate_post(news, comment=comment)
        context.user_data['post'] = result

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
                InlineKeyboardButton("‚úèÔ∏è –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="revise")
            ]
        ])
        await update.message.reply_text(result, parse_mode="Markdown", reply_markup=keyboard)
        return

    if not user_input or len(user_input.strip()) < 10:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å.")
        return

    if len(user_input) > 1000:
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å, —Å–æ–∫—Ä–∞—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç—å...")

    result = await generate_post(user_input)
    context.user_data['news'] = user_input
    context.user_data['post'] = result

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
            InlineKeyboardButton("‚úèÔ∏è –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="revise")
        ]
    ])

    await update.message.reply_text(result, parse_mode="Markdown", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "publish":
        post = context.user_data.get('post')
        news = context.user_data.get('news')
        if post:
            await context.bot.send_message(chat_id=CHANNEL_ID, text=post, parse_mode="Markdown")
            log_to_csv(user_id, news, post)
            await query.edit_message_reply_markup(reply_markup=None)
            await query.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            try:
                df = pd.read_csv(LOG_FILE)
                df['timestamp'] = pd.to_datetime(df['timestamp'])
                today = datetime.now().date()
                published_today = df[df['timestamp'].dt.date == today].shape[0]
                total_published = df.shape[0]
                await query.message.reply_text(
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–°–µ–≥–æ–¥–Ω—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_today}\n–í—Å–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {total_published}"
                )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    elif query.data == "revise":
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üì¢ –°–µ—Ä—å—ë–∑–Ω–æ", callback_data="style_strict"),
                InlineKeyboardButton("üòè –° –∏—Ä–æ–Ω–∏–µ–π", callback_data="style_ironic")
            ],
            [
                InlineKeyboardButton("üßµ –ö—Ä–∞—Ç–∫–æ", callback_data="style_short"),
                InlineKeyboardButton("üó£ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ", callback_data="style_emotional")
            ],
            [
                InlineKeyboardButton("üõ† –î—Ä—É–≥–æ–µ", callback_data="revise_custom")
            ]
        ])
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("–ö–∞–∫ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç? –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–ª–∏ —É–∫–∞–∂–∏ –≤—Ä—É—á–Ω—É—é:", reply_markup=keyboard)

    elif query.data == "revise_custom":
        context.user_data['awaiting_revision_text'] = True
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–≤–æ—Å—Ç—å, –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ—ë –≤ –ø–æ—Å—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º. –ü–æ—Ç–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å –µ–≥–æ –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å.")

# –ö–æ–º–∞–Ω–¥–∞ /–¥–∞–π_–ª–æ–≥–∏
async def send_logs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id != OWNER_ID:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º.")
        return

    try:
        with open(LOG_FILE, "rb") as file:
            await update.message.reply_document(document=InputFile(file), filename="news_logs.csv")
    except FileNotFoundError:
        await update.message.reply_text("–§–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("logs", send_logs))
    app.add_handler(CallbackQueryHandler(handle_style_selection, pattern="^style_"))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler((filters.TEXT | filters.Caption()) & ~filters.COMMAND, unified_message_handler))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()