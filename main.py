import logging
import pandas as pd
import os
from telegram import Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler,
                          CallbackQueryHandler, ContextTypes, filters)
from datetime import datetime
from openai import OpenAI
from dotenv import load_dotenv
load_dotenv()

TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]
CHANNEL_ID = os.environ["CHANNEL_ID"]
OWNER_ID = int(os.environ["OWNER_ID"])
LOG_FILE = os.environ.get("LOG_FILE", "news_logs.csv")

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

def extract_and_format(response: str) -> str:
    response = response.replace("–ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n", "–ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ")
    lines = response.strip().splitlines()
    formatted = []
    headline_done = False

    for line in lines:
        line = line.strip()
        if not line:
            continue

        if not headline_done and not line.startswith("**") and "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:" not in line:
            formatted.append(f"**‚ùóÔ∏è{line}**")
            headline_done = True
        else:
            formatted.append(line)

    return "\n\n".join(formatted)

PROMPT_TEMPLATE = """
–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–∏—à—É—â–∏–π –æ—Ç –ª–∏—Ü–∞ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –†–æ—Å—Å–∏–∏, —Ä–µ–∞–≥–∏—Ä—É—è –Ω–∞ —Å–≤–µ–∂–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏.

–í–æ—Ç –Ω–æ–≤–æ—Å—Ç—å:

"{news}"

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –ø–æ —à–∞–±–ª–æ–Ω—É:

1. –°–Ω–∞—á–∞–ª–∞ ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
2. –ó–∞—Ç–µ–º ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
3. –†–∞–∑–¥–µ–ª–∏ —Å–º—ã—Å–ª–æ–≤—ã–µ —á–∞—Å—Ç–∏ —ç–º–æ–¥–∑–∏ (—Å–º. –Ω–∏–∂–µ).
4. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å: –ò—Ä–æ–Ω–∏—á–Ω–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ, –∏–ª–∏ –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏.
5. –ù–µ –¥–æ–±–∞–≤–ª—è–π –≤–æ–¥—É, –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç, –∫–ª–∏—à–µ. –ü–∏—à–∏ –∂–∏–≤–æ, –æ—Ç –ª–∏—Ü–∞ —Ä–æ—Å—Å–∏—è–Ω–∏–Ω–∞.

üìå –§–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞:

[–≠–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞] [–ö—Ä–∞—Ç–∫–∞—è —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏]

[–≠–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞] –ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [—Ç–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]

–í—ã–≤–æ–¥–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
"""

COPYWRITING_PROMPT_TEMPLATE = """
–¢—ã ‚Äî –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Å–æ–∑–¥–∞—é—â–∏–π –∫–æ—Ä–æ—Ç–∫–∏–µ, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –æ—Ç –ª–∏—Ü–∞ –º—É–∂—á–∏–Ω—ã 35 –ª–µ—Ç. –í–æ—Ç –∑–∞–¥–∞—á–∞:

{instruction}

–§–æ—Ä–º–∞—Ç:
**‚ùóÔ∏è[–ó–∞–≥–æ–ª–æ–≤–æ–∫]**

[–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞]
"""

def log_to_csv(user_id: int, news: str, response: str) -> None:
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    entry = {"timestamp": now, "user_id": user_id, "news": news, "response": response}
    try:
        df = pd.read_csv(LOG_FILE)
    except FileNotFoundError:
        df = pd.DataFrame(columns=["timestamp", "user_id", "news", "response"])
    df = pd.concat([df, pd.DataFrame([entry])], ignore_index=True)
    df.to_csv(LOG_FILE, index=False)

async def generate_post(news: str, comment: str = None, style: str = None, is_topic: bool = False, is_copywriting: bool = False) -> str:
    prompt = COPYWRITING_PROMPT_TEMPLATE.format(instruction=news) if is_topic or is_copywriting else PROMPT_TEMPLATE.format(news=news)

    if style:
        prompt += f"\n\n–°—Ç–∏–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {style}"

    if comment:
        prompt += (
            f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:\n{comment}\n\n"
            "–ü–µ—Ä–µ–ø–∏—à–∏ –≤–µ—Å—å –ø–æ—Å—Ç —Ü–µ–ª–∏–∫–æ–º —Å —É—á—ë—Ç–æ–º –∑–∞–º–µ—á–∞–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞."
        )

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500,
            temperature=0.7
        )
        raw = response.choices[0].message.content.strip()
        return raw if is_copywriting else extract_and_format(raw)
    except Exception as e:
        logging.exception("OpenAI API error")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

async def unified_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id != OWNER_ID:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return

    # ‚úÖ –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É COPYWRITING
    if context.user_data.get("copywriting_mode"):
        context.user_data["copywriting_mode"] = False
        instruction = update.message.text or update.message.caption
        post = await generate_post(instruction, is_copywriting=True)
        context.user_data["news"] = instruction
        context.user_data["post"] = post

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
                InlineKeyboardButton("‚úèÔ∏è –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="revise")
            ]
        ])
        await update.message.reply_text(post, parse_mode="Markdown", reply_markup=keyboard)
        return

    # ‚úÖ –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å media
    if update.message.photo:
        context.user_data['media'] = update.message.photo[-1].file_id
        context.user_data['media_type'] = 'photo'
    elif update.message.video:
        context.user_data['media'] = update.message.video.file_id
        context.user_data['media_type'] = 'video'

    user_input = update.message.text or update.message.caption
    if context.user_data.get("revision_mode"):
        context.user_data["revision_mode"] = False
        original_post = context.user_data.get("news")
        comment = user_input

        is_copywriting = context.user_data.get("copywriting_mode_active", False)
        revised = await generate_post(original_post, comment=comment, is_copywriting=is_copywriting)

        context.user_data["post"] = revised

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
                InlineKeyboardButton("‚úèÔ∏è –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="revise")
            ]
        ])
        await update.message.reply_text(revised, parse_mode="Markdown", reply_markup=keyboard)
        return
    if not user_input or len(user_input.strip()) < 10:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å.")
        return

    await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç—å...")

    result = await generate_post(user_input)
    context.user_data['news'] = user_input
    context.user_data['post'] = result

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
            InlineKeyboardButton("‚úèÔ∏è –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="revise")
        ]
    ])
    await update.message.reply_text(result, parse_mode="Markdown", reply_markup=keyboard)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "publish":
        post = context.user_data.get('post')
        news = context.user_data.get('news')
        media_id = context.user_data.get('media')
        media_type = context.user_data.get('media_type')

        try:
            if media_id and media_type == 'photo':
                sent = await context.bot.send_photo(chat_id=CHANNEL_ID, photo=media_id, caption=post,
                                                    parse_mode="Markdown")
            elif media_id and media_type == 'video':
                sent = await context.bot.send_video(chat_id=CHANNEL_ID, video=media_id, caption=post,
                                                    parse_mode="Markdown")
            else:
                sent = await context.bot.send_message(chat_id=CHANNEL_ID, text=post, parse_mode="Markdown")

            context.user_data['last_published_message_id'] = sent.message_id
            context.user_data['media'] = None
            context.user_data['media_type'] = None
            context.user_data['copywriting_mode_active'] = False
            log_to_csv(query.from_user.id, news, post)
            await query.edit_message_reply_markup(reply_markup=None)
            await query.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    elif query.data == "revise":
        context.user_data["revision_mode"] = True
        await query.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É—Ç–æ—á–Ω–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ—Å—Ç—É.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–≤–æ—Å—Ç—å, –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ—ë –≤ –ø–æ—Å—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º. –ü–æ—Ç–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å –µ–≥–æ –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å.")

async def start_copywriting_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['copywriting_mode'] = True
    context.user_data['copywriting_mode_active'] = True
    await update.message.reply_text("üìù –†–µ–∂–∏–º –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ –≤–∫–ª—é—á—ë–Ω. –ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(CommandHandler("post", start_copywriting_mode))
    app.add_handler(MessageHandler((filters.TEXT | filters.Caption()) & ~filters.COMMAND, unified_message_handler))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
